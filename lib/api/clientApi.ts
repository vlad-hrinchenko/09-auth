import { axiosConfig } from "../api/api";
import type {
  User,
  RegisteredUser,
  CreateUserData,
  SessionResponseData,
} from "@/types/user";
import type {
  Note,
  NewNoteData,
  FetchNotesResponse,
} from "@/types/note";

// üîê –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const register = async (
  payload: CreateUserData
): Promise<RegisteredUser> => {
  const { data } = await axiosConfig.post<RegisteredUser>(
    "/auth/register",
    payload
  );
  return data;
};

// üîê –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const login = async (payload: CreateUserData): Promise<User> => {
  const { data } = await axiosConfig.post<User>("/auth/login", payload);
  return data;
};

// üö™ –í–∏—Ö—ñ–¥ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏
export const logout = async (): Promise<void> => {
  await axiosConfig.post("/auth/logout");
};

// üë§ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const getUser = async (): Promise<User> => {
  const { data } = await axiosConfig.get<User>("/users/me");
  return data;
};

// üìù –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const updateUserProfile = async (
  updateUserData: Partial<User>
): Promise<User> => {
  const { data } = await axiosConfig.patch<User>("/users/me", updateUserData);
  return data;
};

// üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Å—ñ—ó —á–µ—Ä–µ–∑ Next.js API (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ CORS)
// checkSession ‚Äî –ó–ê–ü–ò–¢ –¥–æ –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ API-—Ä–æ—É—Ç–∞ (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ CORS)
export const checkSession = async (): Promise<SessionResponseData> => {
  const res = await fetch("/api/session", {
    credentials: "include",
  });

  if (!res.ok) throw new Error("Session check failed");

  return res.json();
};


// üóí –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –Ω–æ—Ç–∞—Ç–æ–∫
export const fetchNotes = async ({
  page = 1,
  perPage = 12,
  search = "",
  tag = "",
}: {
  page?: number;
  perPage?: number;
  search?: string;
  tag?: string;
}): Promise<FetchNotesResponse> => {
  const params: Record<string, string | number> = { page, perPage };
  if (search.trim()) params.search = search;
  if (tag && tag.toLowerCase() !== "all") params.tag = tag;

  const { data } = await axiosConfig.get<FetchNotesResponse>("/notes", {
    params,
  });
  return data;
};

// üóí –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É –∑–∞ ID
export const fetchNoteById = async (id: string): Promise<Note> => {
  const { data } = await axiosConfig.get<Note>(`/notes/${id}`);
  return data;
};

// ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É
export const createNote = async (note: NewNoteData): Promise<Note> => {
  const { data } = await axiosConfig.post<Note>("/notes", note);
  return data;
};

// ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É –∑–∞ ID
export const deleteNote = async (id: string): Promise<Note> => {
  const { data } = await axiosConfig.delete<Note>(`/notes/${id}`);
  return data;
};
